# Generated by Django 5.2.1 on 2025-05-24 01:53

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BadgeCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Badge Category',
                'verbose_name_plural': 'Badge Categories',
                'db_table': 'badges_category',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('badge_type', models.CharField(choices=[('achievement', 'Achievement'), ('milestone', 'Milestone'), ('participation', 'Participation'), ('skill', 'Skill'), ('special', 'Special')], default='achievement', max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='badges/icons/%Y/%m/')),
                ('icon_class', models.CharField(blank=True, max_length=50, null=True)),
                ('color', models.CharField(default='#007bff', max_length=7)),
                ('background_color', models.CharField(default='#ffffff', max_length=7)),
                ('trigger_type', models.CharField(choices=[('course_completion', 'Course Completion'), ('test_score', 'Test Score'), ('streak', 'Learning Streak'), ('participation_count', 'Participation Count'), ('time_spent', 'Time Spent Learning'), ('perfect_score', 'Perfect Score'), ('first_attempt', 'First Attempt Success'), ('improvement', 'Score Improvement'), ('custom', 'Custom Criteria')], default='course_completion', max_length=30)),
                ('required_value', models.DecimalField(decimal_places=2, default=0.0, help_text='Required value for trigger (score, count, etc.)', max_digits=10)),
                ('comparison_operator', models.CharField(choices=[('gte', 'Greater than or equal'), ('gt', 'Greater than'), ('eq', 'Equal to'), ('lt', 'Less than'), ('lte', 'Less than or equal')], default='gte', max_length=10)),
                ('criteria_json', models.JSONField(blank=True, default=dict, help_text='Additional criteria in JSON format')),
                ('is_active', models.BooleanField(default=True)),
                ('is_stackable', models.BooleanField(default=False)),
                ('max_awards', models.PositiveIntegerField(default=1, help_text='Maximum times this badge can be awarded (0 for unlimited)')),
                ('points_value', models.PositiveIntegerField(default=10)),
                ('xp_reward', models.PositiveIntegerField(default=0)),
                ('is_secret', models.BooleanField(default=False)),
                ('available_from', models.DateTimeField(blank=True, null=True)),
                ('available_until', models.DateTimeField(blank=True, null=True)),
                ('total_awarded', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='badges', to='courses.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_badges', to=settings.AUTH_USER_MODEL)),
                ('prerequisite_badges', models.ManyToManyField(blank=True, related_name='unlocks_badges', to='badges.badge')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to='badges.badgecategory')),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'db_table': 'badges_badge',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BadgeProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('current_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('required_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_completed', models.BooleanField(default=False)),
                ('is_eligible', models.BooleanField(default=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='badges.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badge_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Badge Progress',
                'verbose_name_plural': 'Badge Progress',
                'db_table': 'badges_badge_progress',
                'ordering': ['-progress_percentage', '-last_updated'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('leaderboard_type', models.CharField(choices=[('points', 'Points'), ('badges', 'Badges'), ('course_completion', 'Course Completion'), ('test_scores', 'Test Scores'), ('streak', 'Learning Streak'), ('time_spent', 'Time Spent')], default='points', max_length=30)),
                ('time_period', models.CharField(choices=[('all_time', 'All Time'), ('yearly', 'Yearly'), ('monthly', 'Monthly'), ('weekly', 'Weekly'), ('daily', 'Daily')], default='all_time', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=True)),
                ('max_entries', models.PositiveIntegerField(default=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.course')),
            ],
            options={
                'verbose_name': 'Leaderboard',
                'verbose_name_plural': 'Leaderboards',
                'db_table': 'badges_leaderboard',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rank', models.PositiveIntegerField()),
                ('score', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('leaderboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='badges.leaderboard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Leaderboard Entry',
                'verbose_name_plural': 'Leaderboard Entries',
                'db_table': 'badges_leaderboard_entry',
                'ordering': ['leaderboard', 'rank'],
            },
        ),
        migrations.CreateModel(
            name='PointTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('points', models.IntegerField()),
                ('transaction_type', models.CharField(choices=[('earned', 'Earned'), ('spent', 'Spent'), ('bonus', 'Bonus'), ('penalty', 'Penalty')], max_length=20)),
                ('reason', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='badges.badge')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Point Transaction',
                'verbose_name_plural': 'Point Transactions',
                'db_table': 'badges_point_transaction',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('trigger_context', models.JSONField(blank=True, default=dict, help_text='Context data when badge was earned')),
                ('progress_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('notification_sent', models.BooleanField(default=False)),
                ('awarded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='awarded_badges', to=settings.AUTH_USER_MODEL)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_badges', to='badges.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Badge',
                'verbose_name_plural': 'User Badges',
                'db_table': 'badges_user_badge',
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('available_points', models.PositiveIntegerField(default=0)),
                ('spent_points', models.PositiveIntegerField(default=0)),
                ('total_xp', models.PositiveIntegerField(default=0)),
                ('level', models.PositiveIntegerField(default=1)),
                ('xp_to_next_level', models.PositiveIntegerField(default=100)),
                ('current_streak', models.PositiveIntegerField(default=0)),
                ('longest_streak', models.PositiveIntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('badges_earned', models.PositiveIntegerField(default=0)),
                ('courses_completed', models.PositiveIntegerField(default=0)),
                ('tests_passed', models.PositiveIntegerField(default=0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='points', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Points',
                'verbose_name_plural': 'User Points',
                'db_table': 'badges_user_points',
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('achievement_type', models.CharField(choices=[('learning_streak', 'Learning Streak'), ('course_master', 'Course Master'), ('test_champion', 'Test Champion'), ('early_bird', 'Early Bird'), ('night_owl', 'Night Owl'), ('perfectionist', 'Perfectionist'), ('improver', 'Improver'), ('social_learner', 'Social Learner')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('achieved_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
                'db_table': 'badges_achievement',
                'ordering': ['-achieved_at'],
                'indexes': [models.Index(fields=['user', 'achievement_type'], name='badges_achi_user_id_54c3e0_idx'), models.Index(fields=['achieved_at'], name='badges_achi_achieve_d4d990_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='badge',
            index=models.Index(fields=['trigger_type'], name='badges_badg_trigger_dfc52b_idx'),
        ),
        migrations.AddIndex(
            model_name='badge',
            index=models.Index(fields=['course'], name='badges_badg_course__34c706_idx'),
        ),
        migrations.AddIndex(
            model_name='badge',
            index=models.Index(fields=['is_active'], name='badges_badg_is_acti_c4a4f2_idx'),
        ),
        migrations.AddIndex(
            model_name='badgeprogress',
            index=models.Index(fields=['user', 'is_completed'], name='badges_badg_user_id_b8e68f_idx'),
        ),
        migrations.AddIndex(
            model_name='badgeprogress',
            index=models.Index(fields=['badge'], name='badges_badg_badge_i_9bb5e2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='badgeprogress',
            unique_together={('user', 'badge')},
        ),
        migrations.AddIndex(
            model_name='leaderboardentry',
            index=models.Index(fields=['leaderboard', 'rank'], name='badges_lead_leaderb_efebb7_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboardentry',
            index=models.Index(fields=['user'], name='badges_lead_user_id_43367e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='leaderboardentry',
            unique_together={('leaderboard', 'user', 'period_start')},
        ),
        migrations.AddIndex(
            model_name='pointtransaction',
            index=models.Index(fields=['user', '-created_at'], name='badges_poin_user_id_94ae39_idx'),
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['user', 'earned_at'], name='badges_user_user_id_1a6616_idx'),
        ),
        migrations.AddIndex(
            model_name='userbadge',
            index=models.Index(fields=['badge'], name='badges_user_badge_i_e7ddc8_idx'),
        ),
    ]
