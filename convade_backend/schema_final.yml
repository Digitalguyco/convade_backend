openapi: 3.0.3
info:
  title: Convade LMS API
  version: 1.0.0
  description: A comprehensive Learning Management System API
paths:
  /api/accounts/auth/login/:
    post:
      operationId: accounts_auth_login_create
      description: Authenticate user with email and password.
      summary: User login
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /api/accounts/auth/logout/:
    post:
      operationId: accounts_auth_logout_create
      description: Logout user and invalidate refresh token.
      summary: User logout
      tags:
      - Authentication
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/accounts/auth/change-password/:
    put:
      operationId: accounts_auth_change_password_update
      description: Change user password endpoint.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: accounts_auth_change_password_partial_update
      description: Change user password endpoint.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChangePasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChangePasswordRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedChangePasswordRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/accounts/auth/register/invitation/:
    post:
      operationId: accounts_auth_register_invitation_create
      description: Complete registration using an invitation token.
      summary: Register via invitation
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationRegistrationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InvitationRegistrationRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/InvitationRegistrationRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationRegistration'
          description: ''
  /api/accounts/auth/register/code/:
    post:
      operationId: accounts_auth_register_code_create
      description: Complete registration using a registration code.
      summary: Register via code
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeRegistrationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CodeRegistrationRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/CodeRegistrationRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeRegistration'
          description: ''
  /api/accounts/auth/verify-email/:
    post:
      operationId: accounts_auth_verify_email_create
      description: Verify user email address using verification token.
      summary: Verify email address
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EmailVerificationRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/EmailVerificationRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailVerification'
          description: ''
  /api/accounts/auth/resend-verification/:
    post:
      operationId: accounts_auth_resend_verification_create
      description: Resend email verification link to user.
      summary: Resend verification email
      tags:
      - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendVerificationRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/ResendVerificationRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendVerification'
          description: ''
  /api/accounts/invitations/:
    get:
      operationId: accounts_invitations_list
      description: Get all invitations sent by the current user or their school.
      summary: List invitations
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Invitations
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInvitationList'
          description: ''
    post:
      operationId: accounts_invitations_create
      description: Send an invitation to register a new user.
      summary: Create invitation
      tags:
      - Invitations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvitationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateInvitationRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateInvitationRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateInvitation'
          description: ''
  /api/accounts/invitations/{id}/:
    get:
      operationId: accounts_invitations_retrieve
      description: Retrieve, update, or delete an invitation.
      summary: Get invitation details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Invitations
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
          description: ''
    put:
      operationId: accounts_invitations_update
      description: Retrieve, update, or delete an invitation.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InvitationRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/InvitationRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
          description: ''
    patch:
      operationId: accounts_invitations_partial_update
      description: Retrieve, update, or delete an invitation.
      summary: Update invitation
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Invitations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedInvitationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedInvitationRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedInvitationRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
          description: ''
    delete:
      operationId: accounts_invitations_destroy
      description: Retrieve, update, or delete an invitation.
      summary: Delete invitation
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Invitations
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/accounts/invitations/{invitation_id}/revoke/:
    post:
      operationId: accounts_invitations_revoke_create
      description: Revoke a pending invitation.
      parameters:
      - in: path
        name: invitation_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/accounts/invitations/validate/{token}/:
    get:
      operationId: accounts_invitations_validate_retrieve
      description: Validate an invitation token.
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/registration-codes/:
    get:
      operationId: accounts_registration_codes_list
      description: Get all registration codes for the user's school.
      summary: List registration codes
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Registration Codes
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegistrationCodeList'
          description: ''
    post:
      operationId: accounts_registration_codes_create
      description: Create a new registration code for a school.
      summary: Create registration code
      tags:
      - Registration Codes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRegistrationCodeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateRegistrationCodeRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateRegistrationCodeRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRegistrationCode'
          description: ''
  /api/accounts/registration-codes/{id}/:
    get:
      operationId: accounts_registration_codes_retrieve
      description: Retrieve, update, or delete a registration code.
      summary: Get registration code details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Registration Codes
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationCode'
          description: ''
    put:
      operationId: accounts_registration_codes_update
      description: Retrieve, update, or delete a registration code.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationCodeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegistrationCodeRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/RegistrationCodeRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationCode'
          description: ''
    patch:
      operationId: accounts_registration_codes_partial_update
      description: Retrieve, update, or delete a registration code.
      summary: Update registration code
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Registration Codes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationCodeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistrationCodeRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedRegistrationCodeRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationCode'
          description: ''
    delete:
      operationId: accounts_registration_codes_destroy
      description: Retrieve, update, or delete a registration code.
      summary: Delete registration code
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Registration Codes
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/accounts/registration-codes/validate/{code}/:
    get:
      operationId: accounts_registration_codes_validate_retrieve
      description: Validate a registration code without using it.
      parameters:
      - in: path
        name: code
        schema:
          type: string
        required: true
      tags:
      - accounts
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/users/:
    get:
      operationId: accounts_users_list
      description: List users endpoint.
      summary: List users
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
  /api/accounts/users/{id}/:
    get:
      operationId: accounts_users_retrieve
      description: User detail, update, delete endpoint.
      summary: Get user details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
    put:
      operationId: accounts_users_update
      description: User detail, update, delete endpoint.
      summary: Update user
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/UserDetailRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
    patch:
      operationId: accounts_users_partial_update
      description: User detail, update, delete endpoint.
      summary: Partially update user
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedUserDetailRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
    delete:
      operationId: accounts_users_destroy
      description: User detail, update, delete endpoint.
      summary: Delete user
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/accounts/profile/:
    get:
      operationId: accounts_profile_retrieve
      description: User profile management endpoint.
      tags:
      - accounts
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
    put:
      operationId: accounts_profile_update
      description: User profile management endpoint.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/UserDetailRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
    patch:
      operationId: accounts_profile_partial_update
      description: User profile management endpoint.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedUserDetailRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
  /api/accounts/profile/current/:
    get:
      operationId: accounts_profile_current_retrieve
      description: Get current user information.
      tags:
      - accounts
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/accounts/schools/:
    get:
      operationId: accounts_schools_list
      description: List and create schools endpoint.
      summary: List schools
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Schools
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSchoolList'
          description: ''
    post:
      operationId: accounts_schools_create
      description: List and create schools endpoint.
      summary: Create school
      tags:
      - Schools
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SchoolRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/SchoolRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
          description: ''
  /api/accounts/schools/{id}/:
    get:
      operationId: accounts_schools_retrieve
      description: School detail, update, delete endpoint.
      summary: Get school details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Schools
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
          description: ''
    put:
      operationId: accounts_schools_update
      description: School detail, update, delete endpoint.
      summary: Update school
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Schools
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SchoolRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/SchoolRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
          description: ''
    patch:
      operationId: accounts_schools_partial_update
      description: School detail, update, delete endpoint.
      summary: Partially update school
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Schools
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSchoolRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSchoolRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedSchoolRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
          description: ''
    delete:
      operationId: accounts_schools_destroy
      description: School detail, update, delete endpoint.
      summary: Delete school
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Schools
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/accounts/refresh/:
    post:
      operationId: accounts_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/accounts/verify/:
    post:
      operationId: accounts_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      responses:
        '200':
          description: No response body
  /api/courses/categories/:
    get:
      operationId: courses_categories_list
      description: ViewSet for course categories.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
    post:
      operationId: courses_categories_create
      description: ViewSet for course categories.
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/courses/categories/{id}/:
    get:
      operationId: courses_categories_retrieve
      description: ViewSet for course categories.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Category.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: courses_categories_destroy
      description: ViewSet for course categories.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Category.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
    patch:
      operationId: courses_categories_partial_update
      description: ViewSet for course categories.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Category.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: courses_categories_update
      description: ViewSet for course categories.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Category.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/courses/courses/:
    get:
      operationId: courses_courses_list
      description: ViewSet for courses with comprehensive CRUD operations.
      parameters:
      - in: query
        name: category
        schema:
          type: string
          format: uuid
      - in: query
        name: difficulty
        schema:
          type: string
          enum:
          - advanced
          - beginner
          - intermediate
        description: |-
          * `beginner` - Beginner
          * `intermediate` - Intermediate
          * `advanced` - Advanced
      - in: query
        name: is_free
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - archived
          - draft
          - published
        description: |-
          * `draft` - Draft
          * `published` - Published
          * `archived` - Archived
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCourseListList'
          description: ''
    post:
      operationId: courses_courses_create
      description: ViewSet for courses with comprehensive CRUD operations.
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CourseCreateUpdateRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/CourseCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseCreateUpdate'
          description: ''
  /api/courses/courses/{id}/:
    get:
      operationId: courses_courses_retrieve
      description: ViewSet for courses with comprehensive CRUD operations.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetail'
          description: ''
    delete:
      operationId: courses_courses_destroy
      description: ViewSet for courses with comprehensive CRUD operations.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
    patch:
      operationId: courses_courses_partial_update
      description: ViewSet for courses with comprehensive CRUD operations.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Course.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCourseCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCourseCreateUpdateRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedCourseCreateUpdateRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseCreateUpdate'
          description: ''
    put:
      operationId: courses_courses_update
      description: ViewSet for courses with comprehensive CRUD operations.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Course.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CourseCreateUpdateRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/CourseCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseCreateUpdate'
          description: ''
  /api/courses/courses/{id}/analytics/:
    get:
      operationId: courses_courses_analytics_retrieve
      description: Get course analytics (instructor only).
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetail'
          description: ''
  /api/courses/courses/{id}/enroll/:
    post:
      operationId: courses_courses_enroll_create
      description: Enroll a student in a course.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Course.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CourseDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/CourseDetailRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetail'
          description: ''
  /api/courses/courses/{id}/enrollments/:
    get:
      operationId: courses_courses_enrollments_retrieve
      description: Get course enrollments (instructor only).
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetail'
          description: ''
  /api/courses/courses/{id}/modules/:
    get:
      operationId: courses_courses_modules_retrieve
      description: Get course modules.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetail'
          description: ''
  /api/courses/courses/{id}/progress/:
    get:
      operationId: courses_courses_progress_retrieve
      description: Get student's progress in a course.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetail'
          description: ''
  /api/courses/courses/{id}/unenroll/:
    delete:
      operationId: courses_courses_unenroll_destroy
      description: Unenroll a student from a course.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/courses/modules/:
    get:
      operationId: courses_modules_list
      description: ViewSet for course modules.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedModuleListList'
          description: ''
    post:
      operationId: courses_modules_create
      description: ViewSet for course modules.
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ModuleDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/ModuleDetailRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDetail'
          description: ''
  /api/courses/modules/{id}/:
    get:
      operationId: courses_modules_retrieve
      description: ViewSet for course modules.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Module.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDetail'
          description: ''
    delete:
      operationId: courses_modules_destroy
      description: ViewSet for course modules.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Module.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
    patch:
      operationId: courses_modules_partial_update
      description: ViewSet for course modules.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Module.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedModuleDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedModuleDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedModuleDetailRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDetail'
          description: ''
    put:
      operationId: courses_modules_update
      description: ViewSet for course modules.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Module.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ModuleDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/ModuleDetailRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDetail'
          description: ''
  /api/courses/modules/{id}/lessons/:
    get:
      operationId: courses_modules_lessons_retrieve
      description: Get module lessons.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Module.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleDetail'
          description: ''
  /api/courses/lessons/:
    get:
      operationId: courses_lessons_list
      description: ViewSet for lessons.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLessonListList'
          description: ''
    post:
      operationId: courses_lessons_create
      description: ViewSet for lessons.
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LessonDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LessonDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/LessonDetailRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonDetail'
          description: ''
  /api/courses/lessons/{id}/:
    get:
      operationId: courses_lessons_retrieve
      description: ViewSet for lessons.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Lesson.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonDetail'
          description: ''
    delete:
      operationId: courses_lessons_destroy
      description: ViewSet for lessons.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Lesson.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
    patch:
      operationId: courses_lessons_partial_update
      description: ViewSet for lessons.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Lesson.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLessonDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLessonDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedLessonDetailRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonDetail'
          description: ''
    put:
      operationId: courses_lessons_update
      description: ViewSet for lessons.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Lesson.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LessonDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LessonDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/LessonDetailRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonDetail'
          description: ''
  /api/courses/lessons/{id}/mark_complete/:
    post:
      operationId: courses_lessons_mark_complete_create
      description: Mark a lesson as completed for the current user.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Lesson.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LessonDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LessonDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/LessonDetailRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonDetail'
          description: ''
  /api/courses/enrollments/:
    get:
      operationId: courses_enrollments_list
      description: ViewSet for viewing enrollments.
      parameters:
      - in: query
        name: course__category
        schema:
          type: string
          format: uuid
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - completed
          - dropped
          - pending
          - suspended
        description: |-
          * `pending` - Pending Approval
          * `active` - Active
          * `completed` - Completed
          * `dropped` - Dropped
          * `suspended` - Suspended
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEnrollmentList'
          description: ''
  /api/courses/enrollments/{id}/:
    get:
      operationId: courses_enrollments_retrieve
      description: ViewSet for viewing enrollments.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Enrollment.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
          description: ''
  /api/courses/announcements/:
    get:
      operationId: courses_announcements_list
      description: ViewSet for course announcements.
      parameters:
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: query
        name: is_published
        schema:
          type: boolean
      - in: query
        name: is_urgent
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAnnouncementList'
          description: ''
    post:
      operationId: courses_announcements_create
      description: ViewSet for course announcements.
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnnouncementRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/AnnouncementRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
          description: ''
  /api/courses/announcements/{id}/:
    get:
      operationId: courses_announcements_retrieve
      description: ViewSet for course announcements.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Announcement.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
          description: ''
    delete:
      operationId: courses_announcements_destroy
      description: ViewSet for course announcements.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Announcement.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
    patch:
      operationId: courses_announcements_partial_update
      description: ViewSet for course announcements.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Announcement.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAnnouncementRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAnnouncementRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedAnnouncementRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
          description: ''
    put:
      operationId: courses_announcements_update
      description: ViewSet for course announcements.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Announcement.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnnouncementRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/AnnouncementRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
          description: ''
  /api/tests/tests/:
    get:
      operationId: tests_tests_list
      description: Get a list of tests based on user permissions
      summary: List tests
      parameters:
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: query
        name: grading_method
        schema:
          type: string
          enum:
          - auto
          - manual
          - mixed
        description: |-
          * `auto` - Auto Grade
          * `manual` - Manual Grade
          * `mixed` - Mixed Grading
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
        description: Filter by test status
      - in: query
        name: test_type
        schema:
          type: string
        description: Filter by test type
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTestListList'
          description: ''
    post:
      operationId: tests_tests_create
      description: Create a new test
      summary: Create test
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestCreateUpdateRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/TestCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCreateUpdate'
          description: ''
  /api/tests/tests/{id}/:
    get:
      operationId: tests_tests_retrieve
      description: Retrieve detailed information about a specific test
      summary: Get test details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: Test UUID
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDetail'
          description: ''
    delete:
      operationId: tests_tests_destroy
      description: Delete a test
      summary: Delete test
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: Test UUID
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
    patch:
      operationId: tests_tests_partial_update
      description: Partially update an existing test
      summary: Partially update test
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: Test UUID
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTestCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTestCreateUpdateRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedTestCreateUpdateRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCreateUpdate'
          description: ''
    put:
      operationId: tests_tests_update
      description: Update an existing test
      summary: Update test
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: Test UUID
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestCreateUpdateRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/TestCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCreateUpdate'
          description: ''
  /api/tests/tests/{id}/analytics/:
    get:
      operationId: tests_tests_analytics_retrieve
      description: Get test analytics (instructor only).
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Test.
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDetail'
          description: ''
  /api/tests/tests/{id}/attempts/:
    get:
      operationId: tests_tests_attempts_retrieve
      description: Get all attempts for this test (instructor only).
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Test.
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDetail'
          description: ''
  /api/tests/tests/{id}/my_attempts/:
    get:
      operationId: tests_tests_my_attempts_retrieve
      description: Get current user's attempts for this test.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Test.
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDetail'
          description: ''
  /api/tests/tests/{id}/start_attempt/:
    post:
      operationId: tests_tests_start_attempt_create
      description: Start a new test attempt.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Test.
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestDetailRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/TestDetailRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDetail'
          description: ''
  /api/tests/questions/:
    get:
      operationId: tests_questions_list
      description: ViewSet for test questions.
      parameters:
      - in: query
        name: difficulty
        schema:
          type: string
          enum:
          - easy
          - hard
          - medium
        description: |-
          * `easy` - Easy
          * `medium` - Medium
          * `hard` - Hard
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: question_type
        schema:
          type: string
          enum:
          - essay
          - fill_blank
          - matching
          - multiple_choice
          - ordering
          - short_answer
          - true_false
        description: |-
          * `multiple_choice` - Multiple Choice
          * `true_false` - True/False
          * `short_answer` - Short Answer
          * `essay` - Essay
          * `fill_blank` - Fill in the Blank
          * `matching` - Matching
          * `ordering` - Ordering
      - in: query
        name: test
        schema:
          type: string
          format: uuid
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedQuestionListList'
          description: ''
    post:
      operationId: tests_questions_create
      description: ViewSet for test questions.
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionCreateUpdateRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/QuestionCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionCreateUpdate'
          description: ''
  /api/tests/questions/{id}/:
    get:
      operationId: tests_questions_retrieve
      description: ViewSet for test questions.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Question.
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionDetail'
          description: ''
    delete:
      operationId: tests_questions_destroy
      description: ViewSet for test questions.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Question.
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
    patch:
      operationId: tests_questions_partial_update
      description: ViewSet for test questions.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Question.
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedQuestionCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedQuestionCreateUpdateRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedQuestionCreateUpdateRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionCreateUpdate'
          description: ''
    put:
      operationId: tests_questions_update
      description: ViewSet for test questions.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Question.
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionCreateUpdateRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/QuestionCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionCreateUpdate'
          description: ''
  /api/tests/attempts/:
    get:
      operationId: tests_attempts_list
      description: Get a list of test attempts based on user permissions
      summary: List test attempts
      parameters:
      - in: query
        name: is_passed
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - completed
          - expired
          - graded
          - in_progress
          - not_started
          - submitted
        description: |-
          * `not_started` - Not Started
          * `in_progress` - In Progress
          * `completed` - Completed
          * `submitted` - Submitted
          * `graded` - Graded
          * `expired` - Expired
      - in: query
        name: test
        schema:
          type: string
          format: uuid
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTestAttemptList'
          description: ''
    post:
      operationId: tests_attempts_create
      description: ViewSet for test attempts.
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestAttempt'
          description: ''
  /api/tests/attempts/{id}/:
    get:
      operationId: tests_attempts_retrieve
      description: Retrieve detailed information about a specific test attempt
      summary: Get test attempt details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: Test attempt UUID
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestAttempt'
          description: ''
    delete:
      operationId: tests_attempts_destroy
      description: ViewSet for test attempts.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Test Attempt.
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
    patch:
      operationId: tests_attempts_partial_update
      description: Partially update a test attempt
      summary: Partially update test attempt
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: Test attempt UUID
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTestAttemptRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTestAttemptRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedTestAttemptRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestAttempt'
          description: ''
    put:
      operationId: tests_attempts_update
      description: Update a test attempt
      summary: Update test attempt
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: Test attempt UUID
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestAttempt'
          description: ''
  /api/tests/attempts/{id}/grade_manually/:
    post:
      operationId: tests_attempts_grade_manually_create
      description: Manually grade an attempt (instructor only).
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Test Attempt.
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestAttempt'
          description: ''
  /api/tests/attempts/{id}/submit_attempt/:
    post:
      operationId: tests_attempts_submit_attempt_create
      description: Submit the entire test attempt.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Test Attempt.
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestAttempt'
          description: ''
  /api/tests/attempts/{id}/submit_response/:
    post:
      operationId: tests_attempts_submit_response_create
      description: Submit a response to a question in this attempt.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Test Attempt.
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/TestAttemptRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestAttempt'
          description: ''
  /api/tests/results/:
    get:
      operationId: tests_results_list
      description: Get a list of test results based on user permissions
      summary: List test results
      parameters:
      - in: query
        name: is_completed
        schema:
          type: boolean
      - in: query
        name: is_passed
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: test
        schema:
          type: string
          format: uuid
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTestResultList'
          description: ''
  /api/tests/results/{id}/:
    get:
      operationId: tests_results_retrieve
      description: Retrieve detailed information about a specific test result
      summary: Get test result details
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: Test result UUID
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResult'
          description: ''
  /api/tests/question-banks/:
    get:
      operationId: tests_question_banks_list
      description: ViewSet for question banks.
      parameters:
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: query
        name: is_public
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedQuestionBankList'
          description: ''
    post:
      operationId: tests_question_banks_create
      description: ViewSet for question banks.
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionBankRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionBankRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/QuestionBankRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
  /api/tests/question-banks/{id}/:
    get:
      operationId: tests_question_banks_retrieve
      description: ViewSet for question banks.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Question Bank.
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
    delete:
      operationId: tests_question_banks_destroy
      description: ViewSet for question banks.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Question Bank.
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
    patch:
      operationId: tests_question_banks_partial_update
      description: ViewSet for question banks.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Question Bank.
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedQuestionBankRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedQuestionBankRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/PatchedQuestionBankRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
    put:
      operationId: tests_question_banks_update
      description: ViewSet for question banks.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Question Bank.
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionBankRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionBankRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/QuestionBankRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
  /api/tests/question-banks/{id}/questions/:
    get:
      operationId: tests_question_banks_questions_retrieve
      description: Get questions in this bank.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Question Bank.
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
  /api/auth/social-login/:
    post:
      operationId: auth_social_login_create
      description: Exchange social auth code for JWT tokens
      summary: Social authentication login
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLoginRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialLoginRequestRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/SocialLoginRequestRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLoginResponse'
          description: ''
        '400':
          description: Bad request
        '401':
          description: Authentication failed
  /api/auth/social-providers/:
    get:
      operationId: auth_social_providers_retrieve
      description: Returns a list of configured social authentication providers
      summary: Get available social authentication providers
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialProvidersResponse'
          description: ''
  /api/auth/social-disconnect/{provider}/:
    delete:
      operationId: auth_social_disconnect_destroy
      description: Disconnect a social account from the current user
      summary: Disconnect social account
      parameters:
      - in: path
        name: provider
        schema:
          type: string
        required: true
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialDisconnectResponse'
          description: ''
        '400':
          description: Bad request
        '404':
          description: Social account not found
  /api/auth/social-connect/{provider}/:
    post:
      operationId: auth_social_connect_create
      description: Connect a Google account to the current user
      summary: Connect social account
      parameters:
      - in: path
        name: provider
        schema:
          type: string
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialConnectResponseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialConnectResponseRequest'
          '*/*':
            schema:
              $ref: '#/components/schemas/SocialConnectResponseRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialConnectResponse'
          description: ''
        '400':
          description: Bad request
components:
  schemas:
    Announcement:
      type: object
      description: Serializer for course announcements.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        course:
          type: string
          format: uuid
        instructor:
          allOf:
          - $ref: '#/components/schemas/Instructor'
          readOnly: true
        title:
          type: string
          maxLength: 200
        content:
          type: string
        is_urgent:
          type: boolean
        is_published:
          type: boolean
        send_email:
          type: boolean
        target_all_students:
          type: boolean
        target_students:
          type: array
          items:
            type: string
            format: uuid
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - course
      - created_at
      - id
      - instructor
      - title
      - updated_at
    AnnouncementRequest:
      type: object
      description: Serializer for course announcements.
      properties:
        course:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
        is_urgent:
          type: boolean
        is_published:
          type: boolean
        send_email:
          type: boolean
        target_all_students:
          type: boolean
        target_students:
          type: array
          items:
            type: string
            format: uuid
      required:
      - content
      - course
      - title
    Answer:
      type: object
      description: Serializer for question answers.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        answer_text:
          type: string
        is_correct:
          type: boolean
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        points:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        match_text:
          type: string
          nullable: true
      required:
      - answer_text
      - id
    AnswerRequest:
      type: object
      description: Serializer for question answers.
      properties:
        answer_text:
          type: string
          minLength: 1
        is_correct:
          type: boolean
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        points:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        match_text:
          type: string
          nullable: true
      required:
      - answer_text
    BlankEnum:
      enum:
      - ''
    Category:
      type: object
      description: Serializer for course categories.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          maxLength: 100
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
          nullable: true
        icon:
          type: string
          nullable: true
          maxLength: 50
        color:
          type: string
          maxLength: 7
        is_active:
          type: boolean
        sort_order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        course_count:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - course_count
      - created_at
      - id
      - name
      - slug
      - updated_at
    CategoryRequest:
      type: object
      description: Serializer for course categories.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        slug:
          type: string
          minLength: 1
          maxLength: 100
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
          nullable: true
        icon:
          type: string
          nullable: true
          maxLength: 50
        color:
          type: string
          minLength: 1
          maxLength: 7
        is_active:
          type: boolean
        sort_order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - name
      - slug
    ChangePasswordRequest:
      type: object
      description: Serializer for changing password.
      properties:
        old_password:
          type: string
          writeOnly: true
          minLength: 1
        new_password:
          type: string
          writeOnly: true
          minLength: 8
        new_password_confirm:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - new_password
      - new_password_confirm
      - old_password
    CodeRegistration:
      type: object
      description: Serializer for registration via registration code.
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
      required:
      - email
      - first_name
      - last_name
    CodeRegistrationRequest:
      type: object
      description: Serializer for registration via registration code.
      properties:
        registration_code:
          type: string
          writeOnly: true
          minLength: 1
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
        password_confirm:
          type: string
          writeOnly: true
          minLength: 1
        first_name:
          type: string
          minLength: 1
          maxLength: 30
        last_name:
          type: string
          minLength: 1
          maxLength: 30
      required:
      - email
      - first_name
      - last_name
      - password
      - password_confirm
      - registration_code
    CourseCreateUpdate:
      type: object
      description: Serializer for creating and updating courses.
      properties:
        title:
          type: string
          maxLength: 200
        slug:
          type: string
          maxLength: 200
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        short_description:
          type: string
          maxLength: 500
        course_code:
          type: string
          maxLength: 20
        category:
          type: string
          format: uuid
        thumbnail:
          type: string
          format: uri
          nullable: true
        intro_video:
          type: string
          format: uri
          nullable: true
        syllabus:
          type: string
          format: uri
          nullable: true
        status:
          $ref: '#/components/schemas/Status399Enum'
        difficulty:
          $ref: '#/components/schemas/DifficultyD25Enum'
        is_free:
          type: boolean
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        estimated_duration:
          type: integer
          maximum: 1000
          minimum: 1
          description: Estimated duration in hours
        start_date:
          type: string
          format: date-time
          nullable: true
        end_date:
          type: string
          format: date-time
          nullable: true
        enrollment_start:
          type: string
          format: date-time
          nullable: true
        enrollment_end:
          type: string
          format: date-time
          nullable: true
        max_students:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        allow_self_enrollment:
          type: boolean
        requires_approval:
          type: boolean
        prerequisites:
          type: array
          items:
            type: string
            format: uuid
        required_materials:
          type: string
          nullable: true
        learning_objectives: {}
        passing_score:
          type: integer
          maximum: 100
          minimum: 0
        certificate_enabled:
          type: boolean
        meta_keywords:
          type: string
          nullable: true
          maxLength: 500
        meta_description:
          type: string
          nullable: true
          maxLength: 160
      required:
      - category
      - course_code
      - description
      - estimated_duration
      - short_description
      - slug
      - title
    CourseCreateUpdateRequest:
      type: object
      description: Serializer for creating and updating courses.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        slug:
          type: string
          minLength: 1
          maxLength: 200
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
          minLength: 1
        short_description:
          type: string
          minLength: 1
          maxLength: 500
        course_code:
          type: string
          minLength: 1
          maxLength: 20
        category:
          type: string
          format: uuid
        thumbnail:
          type: string
          format: binary
          nullable: true
        intro_video:
          type: string
          format: binary
          nullable: true
        syllabus:
          type: string
          format: binary
          nullable: true
        status:
          $ref: '#/components/schemas/Status399Enum'
        difficulty:
          $ref: '#/components/schemas/DifficultyD25Enum'
        is_free:
          type: boolean
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        estimated_duration:
          type: integer
          maximum: 1000
          minimum: 1
          description: Estimated duration in hours
        start_date:
          type: string
          format: date-time
          nullable: true
        end_date:
          type: string
          format: date-time
          nullable: true
        enrollment_start:
          type: string
          format: date-time
          nullable: true
        enrollment_end:
          type: string
          format: date-time
          nullable: true
        max_students:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        allow_self_enrollment:
          type: boolean
        requires_approval:
          type: boolean
        prerequisites:
          type: array
          items:
            type: string
            format: uuid
        required_materials:
          type: string
          nullable: true
        learning_objectives: {}
        passing_score:
          type: integer
          maximum: 100
          minimum: 0
        certificate_enabled:
          type: boolean
        meta_keywords:
          type: string
          nullable: true
          maxLength: 500
        meta_description:
          type: string
          nullable: true
          maxLength: 160
      required:
      - category
      - course_code
      - description
      - estimated_duration
      - short_description
      - slug
      - title
    CourseDetail:
      type: object
      description: Detailed serializer for individual courses.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        slug:
          type: string
          maxLength: 200
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        short_description:
          type: string
          maxLength: 500
        course_code:
          type: string
          maxLength: 20
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
        instructor:
          allOf:
          - $ref: '#/components/schemas/Instructor'
          readOnly: true
        school:
          type: string
          format: uuid
        thumbnail:
          type: string
          format: uri
          nullable: true
        intro_video:
          type: string
          format: uri
          nullable: true
        syllabus:
          type: string
          format: uri
          nullable: true
        status:
          $ref: '#/components/schemas/Status399Enum'
        difficulty:
          $ref: '#/components/schemas/DifficultyD25Enum'
        is_free:
          type: boolean
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        estimated_duration:
          type: integer
          maximum: 1000
          minimum: 1
          description: Estimated duration in hours
        start_date:
          type: string
          format: date-time
          nullable: true
        end_date:
          type: string
          format: date-time
          nullable: true
        enrollment_start:
          type: string
          format: date-time
          nullable: true
        enrollment_end:
          type: string
          format: date-time
          nullable: true
        max_students:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        allow_self_enrollment:
          type: boolean
        requires_approval:
          type: boolean
        prerequisites:
          type: array
          items:
            $ref: '#/components/schemas/CourseList'
          readOnly: true
        required_materials:
          type: string
          nullable: true
        learning_objectives: {}
        passing_score:
          type: integer
          maximum: 100
          minimum: 0
        certificate_enabled:
          type: boolean
        meta_keywords:
          type: string
          nullable: true
          maxLength: 500
        meta_description:
          type: string
          nullable: true
          maxLength: 160
        view_count:
          type: integer
          readOnly: true
        enrollment_count:
          type: integer
          readOnly: true
        completion_count:
          type: integer
          readOnly: true
        modules:
          type: array
          items:
            $ref: '#/components/schemas/ModuleList'
          readOnly: true
        is_enrollment_open:
          type: boolean
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
        available_slots:
          type: integer
          readOnly: true
        completion_rate:
          type: number
          format: double
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        published_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
      - available_slots
      - category
      - completion_count
      - completion_rate
      - course_code
      - created_at
      - description
      - enrollment_count
      - estimated_duration
      - id
      - instructor
      - is_active
      - is_enrollment_open
      - modules
      - prerequisites
      - published_at
      - school
      - short_description
      - slug
      - title
      - updated_at
      - view_count
    CourseDetailRequest:
      type: object
      description: Detailed serializer for individual courses.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        slug:
          type: string
          minLength: 1
          maxLength: 200
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
          minLength: 1
        short_description:
          type: string
          minLength: 1
          maxLength: 500
        course_code:
          type: string
          minLength: 1
          maxLength: 20
        school:
          type: string
          format: uuid
        thumbnail:
          type: string
          format: binary
          nullable: true
        intro_video:
          type: string
          format: binary
          nullable: true
        syllabus:
          type: string
          format: binary
          nullable: true
        status:
          $ref: '#/components/schemas/Status399Enum'
        difficulty:
          $ref: '#/components/schemas/DifficultyD25Enum'
        is_free:
          type: boolean
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        estimated_duration:
          type: integer
          maximum: 1000
          minimum: 1
          description: Estimated duration in hours
        start_date:
          type: string
          format: date-time
          nullable: true
        end_date:
          type: string
          format: date-time
          nullable: true
        enrollment_start:
          type: string
          format: date-time
          nullable: true
        enrollment_end:
          type: string
          format: date-time
          nullable: true
        max_students:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        allow_self_enrollment:
          type: boolean
        requires_approval:
          type: boolean
        required_materials:
          type: string
          nullable: true
        learning_objectives: {}
        passing_score:
          type: integer
          maximum: 100
          minimum: 0
        certificate_enabled:
          type: boolean
        meta_keywords:
          type: string
          nullable: true
          maxLength: 500
        meta_description:
          type: string
          nullable: true
          maxLength: 160
      required:
      - course_code
      - description
      - estimated_duration
      - school
      - short_description
      - slug
      - title
    CourseList:
      type: object
      description: Serializer for course list view.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        slug:
          type: string
          maxLength: 200
          pattern: ^[-a-zA-Z0-9_]+$
        short_description:
          type: string
          maxLength: 500
        course_code:
          type: string
          maxLength: 20
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
        instructor:
          allOf:
          - $ref: '#/components/schemas/Instructor'
          readOnly: true
        thumbnail:
          type: string
          format: uri
          nullable: true
        status:
          $ref: '#/components/schemas/Status399Enum'
        difficulty:
          $ref: '#/components/schemas/DifficultyD25Enum'
        is_free:
          type: boolean
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        estimated_duration:
          type: integer
          maximum: 1000
          minimum: 1
          description: Estimated duration in hours
        max_students:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        enrollment_count:
          type: integer
          readOnly: true
        completion_rate:
          type: number
          format: double
          readOnly: true
        module_count:
          type: integer
          readOnly: true
        is_enrollment_open:
          type: boolean
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - category
      - completion_rate
      - course_code
      - created_at
      - enrollment_count
      - estimated_duration
      - id
      - instructor
      - is_active
      - is_enrollment_open
      - module_count
      - short_description
      - slug
      - title
    CourseListRequest:
      type: object
      description: Serializer for course list view.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        slug:
          type: string
          minLength: 1
          maxLength: 200
          pattern: ^[-a-zA-Z0-9_]+$
        short_description:
          type: string
          minLength: 1
          maxLength: 500
        course_code:
          type: string
          minLength: 1
          maxLength: 20
        thumbnail:
          type: string
          format: binary
          nullable: true
        status:
          $ref: '#/components/schemas/Status399Enum'
        difficulty:
          $ref: '#/components/schemas/DifficultyD25Enum'
        is_free:
          type: boolean
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        estimated_duration:
          type: integer
          maximum: 1000
          minimum: 1
          description: Estimated duration in hours
        max_students:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - course_code
      - estimated_duration
      - short_description
      - slug
      - title
    CreateInvitation:
      type: object
      description: Serializer for creating invitations.
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
        school:
          type: string
          format: uuid
        expires_in_days:
          type: integer
          maximum: 30
          minimum: 1
          default: 7
        additional_data: {}
      required:
      - email
      - role
      - school
    CreateInvitationRequest:
      type: object
      description: Serializer for creating invitations.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
        school:
          type: string
          format: uuid
        expires_in_days:
          type: integer
          maximum: 30
          minimum: 1
          default: 7
        additional_data: {}
      required:
      - email
      - role
      - school
    CreateRegistrationCode:
      type: object
      description: Serializer for creating registration codes.
      properties:
        school:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/RoleEnum'
        max_uses:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        expires_at:
          type: string
          format: date-time
          nullable: true
        grade_level:
          type: string
          nullable: true
          maxLength: 20
        department:
          type: string
          nullable: true
          maxLength: 100
      required:
      - school
    CreateRegistrationCodeRequest:
      type: object
      description: Serializer for creating registration codes.
      properties:
        school:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/RoleEnum'
        max_uses:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        expires_at:
          type: string
          format: date-time
          nullable: true
        grade_level:
          type: string
          nullable: true
          maxLength: 20
        department:
          type: string
          nullable: true
          maxLength: 100
      required:
      - school
    Difficulty9d4Enum:
      enum:
      - easy
      - medium
      - hard
      type: string
      description: |-
        * `easy` - Easy
        * `medium` - Medium
        * `hard` - Hard
    DifficultyD25Enum:
      enum:
      - beginner
      - intermediate
      - advanced
      type: string
      description: |-
        * `beginner` - Beginner
        * `intermediate` - Intermediate
        * `advanced` - Advanced
    EmailVerification:
      type: object
      description: Serializer for email verification.
      properties:
        token:
          type: string
      required:
      - token
    EmailVerificationRequest:
      type: object
      description: Serializer for email verification.
      properties:
        token:
          type: string
          minLength: 1
      required:
      - token
    Enrollment:
      type: object
      description: Serializer for course enrollments.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        student:
          allOf:
          - $ref: '#/components/schemas/Instructor'
          readOnly: true
        course:
          allOf:
          - $ref: '#/components/schemas/CourseList'
          readOnly: true
        status:
          $ref: '#/components/schemas/EnrollmentStatusEnum'
        enrollment_date:
          type: string
          format: date-time
          readOnly: true
        completion_date:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        progress_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        last_accessed:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        current_grade:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          readOnly: true
        final_grade:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
        total_study_time:
          type: integer
          readOnly: true
        certificate_issued:
          type: boolean
          readOnly: true
        certificate_date:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        payment_completed:
          type: boolean
        payment_date:
          type: string
          format: date-time
          nullable: true
        is_passed:
          type: boolean
          readOnly: true
      required:
      - certificate_date
      - certificate_issued
      - completion_date
      - course
      - current_grade
      - enrollment_date
      - final_grade
      - id
      - is_passed
      - last_accessed
      - student
      - total_study_time
    EnrollmentStatusEnum:
      enum:
      - pending
      - active
      - completed
      - dropped
      - suspended
      type: string
      description: |-
        * `pending` - Pending Approval
        * `active` - Active
        * `completed` - Completed
        * `dropped` - Dropped
        * `suspended` - Suspended
    GradingMethodEnum:
      enum:
      - auto
      - manual
      - mixed
      type: string
      description: |-
        * `auto` - Auto Grade
        * `manual` - Manual Grade
        * `mixed` - Mixed Grading
    Instructor:
      type: object
      description: Basic instructor information serializer.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        email:
          type: string
          format: email
          readOnly: true
        profile_picture:
          type: string
          format: uri
          nullable: true
      required:
      - email
      - first_name
      - id
      - last_name
    InstructorRequest:
      type: object
      description: Basic instructor information serializer.
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 30
        last_name:
          type: string
          minLength: 1
          maxLength: 30
        profile_picture:
          type: string
          format: binary
          nullable: true
      required:
      - first_name
      - last_name
    Invitation:
      type: object
      description: Serializer for Invitation model.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
        school:
          type: string
          format: uuid
        school_name:
          type: string
          readOnly: true
        token:
          type: string
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/InvitationStatusEnum'
          default: pending
        invited_by:
          type: string
          format: uuid
          readOnly: true
        invited_by_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        expires_at:
          type: string
          format: date-time
        accepted_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        accepted_by:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        additional_data: {}
        is_valid:
          type: boolean
          readOnly: true
      required:
      - accepted_at
      - accepted_by
      - created_at
      - email
      - expires_at
      - id
      - invited_by
      - invited_by_name
      - is_valid
      - role
      - school
      - school_name
      - token
    InvitationRegistration:
      type: object
      description: Serializer for registration via invitation.
      properties:
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
      required:
      - first_name
      - last_name
    InvitationRegistrationRequest:
      type: object
      description: Serializer for registration via invitation.
      properties:
        invitation_token:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 8
        password_confirm:
          type: string
          writeOnly: true
          minLength: 1
        first_name:
          type: string
          minLength: 1
          maxLength: 30
        last_name:
          type: string
          minLength: 1
          maxLength: 30
      required:
      - first_name
      - invitation_token
      - last_name
      - password
      - password_confirm
    InvitationRequest:
      type: object
      description: Serializer for Invitation model.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
        school:
          type: string
          format: uuid
        status:
          allOf:
          - $ref: '#/components/schemas/InvitationStatusEnum'
          default: pending
        expires_at:
          type: string
          format: date-time
        additional_data: {}
      required:
      - email
      - expires_at
      - role
      - school
    InvitationStatusEnum:
      enum:
      - pending
      - accepted
      - expired
      - revoked
      type: string
      description: |-
        * `pending` - Pending
        * `accepted` - Accepted
        * `expired` - Expired
        * `revoked` - Revoked
    LessonDetail:
      type: object
      description: Detailed serializer for individual lessons.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        module:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 200
        lesson_type:
          $ref: '#/components/schemas/LessonTypeEnum'
        content:
          type: string
          nullable: true
        video_file:
          type: string
          format: uri
          nullable: true
        video_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        attachment:
          type: string
          format: uri
          nullable: true
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          default: 0
        is_published:
          type: boolean
        is_free_preview:
          type: boolean
        duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Duration in minutes
        live_session_date:
          type: string
          format: date-time
          nullable: true
        live_session_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        view_count:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - module
      - title
      - updated_at
      - view_count
    LessonDetailRequest:
      type: object
      description: Detailed serializer for individual lessons.
      properties:
        module:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 200
        lesson_type:
          $ref: '#/components/schemas/LessonTypeEnum'
        content:
          type: string
          nullable: true
        video_file:
          type: string
          format: binary
          nullable: true
        video_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        attachment:
          type: string
          format: binary
          nullable: true
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          default: 0
        is_published:
          type: boolean
        is_free_preview:
          type: boolean
        duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Duration in minutes
        live_session_date:
          type: string
          format: date-time
          nullable: true
        live_session_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
      required:
      - module
      - title
    LessonList:
      type: object
      description: Serializer for lesson list view.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        lesson_type:
          $ref: '#/components/schemas/LessonTypeEnum'
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        is_published:
          type: boolean
        is_free_preview:
          type: boolean
        duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Duration in minutes
        view_count:
          type: integer
          readOnly: true
      required:
      - id
      - title
      - view_count
    LessonListRequest:
      type: object
      description: Serializer for lesson list view.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        lesson_type:
          $ref: '#/components/schemas/LessonTypeEnum'
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        is_published:
          type: boolean
        is_free_preview:
          type: boolean
        duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Duration in minutes
      required:
      - title
    LessonTypeEnum:
      enum:
      - video
      - text
      - quiz
      - assignment
      - download
      - live_session
      type: string
      description: |-
        * `video` - Video
        * `text` - Text/Article
        * `quiz` - Quiz
        * `assignment` - Assignment
        * `download` - Downloadable Resource
        * `live_session` - Live Session
    Login:
      type: object
      description: Serializer for user login.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    LoginRequest:
      type: object
      description: Serializer for user login.
      properties:
        email:
          type: string
          format: email
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    ModuleDetail:
      type: object
      description: Detailed serializer for modules with lessons.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        course:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          default: 0
        is_published:
          type: boolean
        estimated_duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Estimated duration in minutes
        unlock_after:
          type: string
          format: uuid
          nullable: true
          description: Module that must be completed before this one
        lessons:
          type: array
          items:
            $ref: '#/components/schemas/LessonList'
          readOnly: true
        lesson_count:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - course
      - created_at
      - id
      - lesson_count
      - lessons
      - title
      - updated_at
    ModuleDetailRequest:
      type: object
      description: Detailed serializer for modules with lessons.
      properties:
        course:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          nullable: true
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          default: 0
        is_published:
          type: boolean
        estimated_duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Estimated duration in minutes
        unlock_after:
          type: string
          format: uuid
          nullable: true
          description: Module that must be completed before this one
      required:
      - course
      - title
    ModuleList:
      type: object
      description: Serializer for module list view.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        is_published:
          type: boolean
        estimated_duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Estimated duration in minutes
        lesson_count:
          type: integer
          readOnly: true
        total_duration:
          type: integer
          readOnly: true
      required:
      - id
      - lesson_count
      - title
      - total_duration
    ModuleListRequest:
      type: object
      description: Serializer for module list view.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          nullable: true
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        is_published:
          type: boolean
        estimated_duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Estimated duration in minutes
      required:
      - title
    NullEnum:
      enum:
      - null
    PaginatedAnnouncementList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Announcement'
    PaginatedCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PaginatedCourseListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CourseList'
    PaginatedEnrollmentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Enrollment'
    PaginatedInvitationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Invitation'
    PaginatedLessonListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/LessonList'
    PaginatedModuleListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ModuleList'
    PaginatedQuestionBankList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/QuestionBank'
    PaginatedQuestionListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/QuestionList'
    PaginatedRegistrationCodeList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationCode'
    PaginatedSchoolList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/School'
    PaginatedTestAttemptList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TestAttempt'
    PaginatedTestListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TestList'
    PaginatedTestResultList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TestResult'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedAnnouncementRequest:
      type: object
      description: Serializer for course announcements.
      properties:
        course:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
        is_urgent:
          type: boolean
        is_published:
          type: boolean
        send_email:
          type: boolean
        target_all_students:
          type: boolean
        target_students:
          type: array
          items:
            type: string
            format: uuid
    PatchedCategoryRequest:
      type: object
      description: Serializer for course categories.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        slug:
          type: string
          minLength: 1
          maxLength: 100
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
          nullable: true
        icon:
          type: string
          nullable: true
          maxLength: 50
        color:
          type: string
          minLength: 1
          maxLength: 7
        is_active:
          type: boolean
        sort_order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
    PatchedChangePasswordRequest:
      type: object
      description: Serializer for changing password.
      properties:
        old_password:
          type: string
          writeOnly: true
          minLength: 1
        new_password:
          type: string
          writeOnly: true
          minLength: 8
        new_password_confirm:
          type: string
          writeOnly: true
          minLength: 1
    PatchedCourseCreateUpdateRequest:
      type: object
      description: Serializer for creating and updating courses.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        slug:
          type: string
          minLength: 1
          maxLength: 200
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
          minLength: 1
        short_description:
          type: string
          minLength: 1
          maxLength: 500
        course_code:
          type: string
          minLength: 1
          maxLength: 20
        category:
          type: string
          format: uuid
        thumbnail:
          type: string
          format: binary
          nullable: true
        intro_video:
          type: string
          format: binary
          nullable: true
        syllabus:
          type: string
          format: binary
          nullable: true
        status:
          $ref: '#/components/schemas/Status399Enum'
        difficulty:
          $ref: '#/components/schemas/DifficultyD25Enum'
        is_free:
          type: boolean
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        estimated_duration:
          type: integer
          maximum: 1000
          minimum: 1
          description: Estimated duration in hours
        start_date:
          type: string
          format: date-time
          nullable: true
        end_date:
          type: string
          format: date-time
          nullable: true
        enrollment_start:
          type: string
          format: date-time
          nullable: true
        enrollment_end:
          type: string
          format: date-time
          nullable: true
        max_students:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        allow_self_enrollment:
          type: boolean
        requires_approval:
          type: boolean
        prerequisites:
          type: array
          items:
            type: string
            format: uuid
        required_materials:
          type: string
          nullable: true
        learning_objectives: {}
        passing_score:
          type: integer
          maximum: 100
          minimum: 0
        certificate_enabled:
          type: boolean
        meta_keywords:
          type: string
          nullable: true
          maxLength: 500
        meta_description:
          type: string
          nullable: true
          maxLength: 160
    PatchedInvitationRequest:
      type: object
      description: Serializer for Invitation model.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
        school:
          type: string
          format: uuid
        status:
          allOf:
          - $ref: '#/components/schemas/InvitationStatusEnum'
          default: pending
        expires_at:
          type: string
          format: date-time
        additional_data: {}
    PatchedLessonDetailRequest:
      type: object
      description: Detailed serializer for individual lessons.
      properties:
        module:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 200
        lesson_type:
          $ref: '#/components/schemas/LessonTypeEnum'
        content:
          type: string
          nullable: true
        video_file:
          type: string
          format: binary
          nullable: true
        video_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        attachment:
          type: string
          format: binary
          nullable: true
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          default: 0
        is_published:
          type: boolean
        is_free_preview:
          type: boolean
        duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Duration in minutes
        live_session_date:
          type: string
          format: date-time
          nullable: true
        live_session_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
    PatchedModuleDetailRequest:
      type: object
      description: Detailed serializer for modules with lessons.
      properties:
        course:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          nullable: true
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          default: 0
        is_published:
          type: boolean
        estimated_duration:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Estimated duration in minutes
        unlock_after:
          type: string
          format: uuid
          nullable: true
          description: Module that must be completed before this one
    PatchedQuestionBankRequest:
      type: object
      description: Serializer for question banks.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          nullable: true
        course:
          type: string
          format: uuid
        is_public:
          type: boolean
        tags: {}
    PatchedQuestionCreateUpdateRequest:
      type: object
      description: Serializer for creating and updating questions.
      properties:
        test:
          type: string
          format: uuid
        question_text:
          type: string
          minLength: 1
        question_type:
          $ref: '#/components/schemas/QuestionTypeEnum'
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        points:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        is_required:
          type: boolean
        image:
          type: string
          format: binary
          nullable: true
        explanation:
          type: string
          nullable: true
        case_sensitive:
          type: boolean
        partial_credit:
          type: boolean
        difficulty:
          $ref: '#/components/schemas/Difficulty9d4Enum'
        tags: {}
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AnswerRequest'
    PatchedRegistrationCodeRequest:
      type: object
      description: Serializer for RegistrationCode model.
      properties:
        school:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/RoleEnum'
        max_uses:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        status:
          $ref: '#/components/schemas/RegistrationCodeStatusEnum'
        expires_at:
          type: string
          format: date-time
          nullable: true
        grade_level:
          type: string
          nullable: true
          maxLength: 20
        department:
          type: string
          nullable: true
          maxLength: 100
    PatchedSchoolRequest:
      type: object
      description: Serializer for School model.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        code:
          type: string
          minLength: 1
          maxLength: 20
        address:
          type: string
          minLength: 1
        city:
          type: string
          minLength: 1
          maxLength: 100
        state:
          type: string
          minLength: 1
          maxLength: 100
        country:
          type: string
          minLength: 1
          maxLength: 100
        postal_code:
          type: string
          minLength: 1
          maxLength: 20
        phone:
          type: string
          minLength: 1
          maxLength: 20
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        established_date:
          type: string
          format: date
          nullable: true
        school_type:
          $ref: '#/components/schemas/SchoolTypeEnum'
        timezone:
          type: string
          minLength: 1
          maxLength: 50
        academic_year_start:
          type: string
          format: date
        academic_year_end:
          type: string
          format: date
    PatchedTestAttemptRequest:
      type: object
      description: Serializer for test attempts.
      properties:
        test:
          type: string
          format: uuid
        student:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/TestAttemptStatusEnum'
        instructor_feedback:
          type: string
          nullable: true
    PatchedTestCreateUpdateRequest:
      type: object
      description: Serializer for creating and updating tests.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          nullable: true
        test_type:
          $ref: '#/components/schemas/TestTypeEnum'
        status:
          $ref: '#/components/schemas/Status399Enum'
        course:
          type: string
          format: uuid
        lesson:
          type: string
          format: uuid
          nullable: true
        time_limit:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Time limit in minutes (0 for no limit)
        available_from:
          type: string
          format: date-time
          nullable: true
        available_until:
          type: string
          format: date-time
          nullable: true
        max_attempts:
          type: integer
          maximum: 10
          minimum: 1
        allow_review:
          type: boolean
        show_correct_answers:
          type: boolean
        show_score_immediately:
          type: boolean
        grading_method:
          $ref: '#/components/schemas/GradingMethodEnum'
        passing_score:
          type: integer
          maximum: 100
          minimum: 0
        randomize_questions:
          type: boolean
        randomize_answers:
          type: boolean
        questions_per_page:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        require_password:
          type: boolean
        access_password:
          type: string
          nullable: true
          maxLength: 50
        ip_restrictions: {}
        require_webcam:
          type: boolean
        prevent_copy_paste:
          type: boolean
        full_screen_mode:
          type: boolean
    PatchedUserDetailRequest:
      type: object
      description: Detailed serializer for User model with additional information.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        first_name:
          type: string
          minLength: 1
          maxLength: 30
        last_name:
          type: string
          minLength: 1
          maxLength: 30
        role:
          $ref: '#/components/schemas/RoleEnum'
        school_id:
          type: string
          nullable: true
          pattern: ^[A-Z0-9]{4,20}$
          maxLength: 20
        grade_level:
          type: string
          nullable: true
          maxLength: 20
        department:
          type: string
          nullable: true
          maxLength: 100
        is_active:
          type: boolean
        is_email_verified:
          type: boolean
    PreferredLearningStyleEnum:
      enum:
      - visual
      - auditory
      - kinesthetic
      - reading
      type: string
      description: |-
        * `visual` - Visual
        * `auditory` - Auditory
        * `kinesthetic` - Kinesthetic
        * `reading` - Reading/Writing
    QuestionBank:
      type: object
      description: Serializer for question banks.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
        course:
          type: string
          format: uuid
        created_by:
          type: string
          format: uuid
          readOnly: true
        created_by_name:
          type: string
          readOnly: true
        is_public:
          type: boolean
        tags: {}
        question_count:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - course
      - created_at
      - created_by
      - created_by_name
      - id
      - name
      - question_count
      - updated_at
    QuestionBankRequest:
      type: object
      description: Serializer for question banks.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          nullable: true
        course:
          type: string
          format: uuid
        is_public:
          type: boolean
        tags: {}
      required:
      - course
      - name
    QuestionCreateUpdate:
      type: object
      description: Serializer for creating and updating questions.
      properties:
        test:
          type: string
          format: uuid
        question_text:
          type: string
        question_type:
          $ref: '#/components/schemas/QuestionTypeEnum'
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        points:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        is_required:
          type: boolean
        image:
          type: string
          format: uri
          nullable: true
        explanation:
          type: string
          nullable: true
        case_sensitive:
          type: boolean
        partial_credit:
          type: boolean
        difficulty:
          $ref: '#/components/schemas/Difficulty9d4Enum'
        tags: {}
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
      required:
      - question_text
      - test
    QuestionCreateUpdateRequest:
      type: object
      description: Serializer for creating and updating questions.
      properties:
        test:
          type: string
          format: uuid
        question_text:
          type: string
          minLength: 1
        question_type:
          $ref: '#/components/schemas/QuestionTypeEnum'
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        points:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        is_required:
          type: boolean
        image:
          type: string
          format: binary
          nullable: true
        explanation:
          type: string
          nullable: true
        case_sensitive:
          type: boolean
        partial_credit:
          type: boolean
        difficulty:
          $ref: '#/components/schemas/Difficulty9d4Enum'
        tags: {}
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AnswerRequest'
      required:
      - question_text
      - test
    QuestionDetail:
      type: object
      description: Detailed serializer for questions with answers.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        test:
          type: string
          format: uuid
        question_text:
          type: string
        question_type:
          $ref: '#/components/schemas/QuestionTypeEnum'
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        points:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        is_required:
          type: boolean
        image:
          type: string
          format: uri
          nullable: true
        explanation:
          type: string
          nullable: true
        case_sensitive:
          type: boolean
        partial_credit:
          type: boolean
        difficulty:
          $ref: '#/components/schemas/Difficulty9d4Enum'
        tags: {}
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - answers
      - created_at
      - id
      - question_text
      - test
      - updated_at
    QuestionList:
      type: object
      description: Serializer for question list view.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        question_text:
          type: string
        question_type:
          $ref: '#/components/schemas/QuestionTypeEnum'
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        points:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        is_required:
          type: boolean
        difficulty:
          $ref: '#/components/schemas/Difficulty9d4Enum'
        answer_count:
          type: integer
          readOnly: true
      required:
      - answer_count
      - id
      - question_text
    QuestionListRequest:
      type: object
      description: Serializer for question list view.
      properties:
        question_text:
          type: string
          minLength: 1
        question_type:
          $ref: '#/components/schemas/QuestionTypeEnum'
        order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        points:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        is_required:
          type: boolean
        difficulty:
          $ref: '#/components/schemas/Difficulty9d4Enum'
      required:
      - question_text
    QuestionResponse:
      type: object
      description: Serializer for question responses.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        question:
          type: string
          format: uuid
        question_text:
          type: string
          readOnly: true
        selected_answers:
          type: array
          items:
            type: string
            format: uuid
        selected_answer_texts:
          type: array
          items:
            type: string
          readOnly: true
        text_response:
          type: string
          nullable: true
        file_response:
          type: string
          format: uri
          nullable: true
        response_data: {}
        points_earned:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
          readOnly: true
        is_correct:
          type: boolean
          readOnly: true
        is_graded:
          type: boolean
          readOnly: true
        feedback:
          type: string
          readOnly: true
          nullable: true
        time_spent:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - feedback
      - id
      - is_correct
      - is_graded
      - points_earned
      - question
      - question_text
      - selected_answer_texts
    QuestionResponseRequest:
      type: object
      description: Serializer for question responses.
      properties:
        question:
          type: string
          format: uuid
        selected_answers:
          type: array
          items:
            type: string
            format: uuid
        text_response:
          type: string
          nullable: true
        file_response:
          type: string
          format: binary
          nullable: true
        response_data: {}
        time_spent:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - question
    QuestionTypeEnum:
      enum:
      - multiple_choice
      - true_false
      - short_answer
      - essay
      - fill_blank
      - matching
      - ordering
      type: string
      description: |-
        * `multiple_choice` - Multiple Choice
        * `true_false` - True/False
        * `short_answer` - Short Answer
        * `essay` - Essay
        * `fill_blank` - Fill in the Blank
        * `matching` - Matching
        * `ordering` - Ordering
    RegistrationCode:
      type: object
      description: Serializer for RegistrationCode model.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        code:
          type: string
          readOnly: true
        school:
          type: string
          format: uuid
        school_name:
          type: string
          readOnly: true
        role:
          $ref: '#/components/schemas/RoleEnum'
        max_uses:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        current_uses:
          type: integer
          readOnly: true
        usage_percentage:
          type: number
          format: double
          readOnly: true
        status:
          $ref: '#/components/schemas/RegistrationCodeStatusEnum'
        expires_at:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: string
          format: uuid
          readOnly: true
        created_by_name:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        grade_level:
          type: string
          nullable: true
          maxLength: 20
        department:
          type: string
          nullable: true
          maxLength: 100
        is_valid:
          type: boolean
          readOnly: true
      required:
      - code
      - created_at
      - created_by
      - created_by_name
      - current_uses
      - id
      - is_valid
      - school
      - school_name
      - usage_percentage
    RegistrationCodeRequest:
      type: object
      description: Serializer for RegistrationCode model.
      properties:
        school:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/RoleEnum'
        max_uses:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        status:
          $ref: '#/components/schemas/RegistrationCodeStatusEnum'
        expires_at:
          type: string
          format: date-time
          nullable: true
        grade_level:
          type: string
          nullable: true
          maxLength: 20
        department:
          type: string
          nullable: true
          maxLength: 100
      required:
      - school
    RegistrationCodeStatusEnum:
      enum:
      - active
      - inactive
      - expired
      type: string
      description: |-
        * `active` - Active
        * `inactive` - Inactive
        * `expired` - Expired
    ResendVerification:
      type: object
      description: Serializer for resending email verification.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    ResendVerificationRequest:
      type: object
      description: Serializer for resending email verification.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    RoleEnum:
      enum:
      - student
      - teacher
      - admin
      type: string
      description: |-
        * `student` - Student
        * `teacher` - Teacher
        * `admin` - Admin
    School:
      type: object
      description: Serializer for School model.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 200
        code:
          type: string
          maxLength: 20
        address:
          type: string
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 100
        country:
          type: string
          maxLength: 100
        postal_code:
          type: string
          maxLength: 20
        phone:
          type: string
          maxLength: 20
        email:
          type: string
          format: email
          maxLength: 254
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        established_date:
          type: string
          format: date
          nullable: true
        school_type:
          $ref: '#/components/schemas/SchoolTypeEnum'
        timezone:
          type: string
          maxLength: 50
        academic_year_start:
          type: string
          format: date
        academic_year_end:
          type: string
          format: date
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - academic_year_end
      - academic_year_start
      - address
      - city
      - code
      - country
      - created_at
      - email
      - id
      - name
      - phone
      - postal_code
      - state
      - updated_at
    SchoolRequest:
      type: object
      description: Serializer for School model.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        code:
          type: string
          minLength: 1
          maxLength: 20
        address:
          type: string
          minLength: 1
        city:
          type: string
          minLength: 1
          maxLength: 100
        state:
          type: string
          minLength: 1
          maxLength: 100
        country:
          type: string
          minLength: 1
          maxLength: 100
        postal_code:
          type: string
          minLength: 1
          maxLength: 20
        phone:
          type: string
          minLength: 1
          maxLength: 20
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        established_date:
          type: string
          format: date
          nullable: true
        school_type:
          $ref: '#/components/schemas/SchoolTypeEnum'
        timezone:
          type: string
          minLength: 1
          maxLength: 50
        academic_year_start:
          type: string
          format: date
        academic_year_end:
          type: string
          format: date
      required:
      - academic_year_end
      - academic_year_start
      - address
      - city
      - code
      - country
      - email
      - name
      - phone
      - postal_code
      - state
    SchoolTypeEnum:
      enum:
      - public
      - private
      - charter
      - international
      type: string
      description: |-
        * `public` - Public
        * `private` - Private
        * `charter` - Charter
        * `international` - International
    SocialConnectResponse:
      type: object
      description: Response serializer for social connect.
      properties:
        auth_url:
          type: string
        message:
          type: string
      required:
      - auth_url
      - message
    SocialConnectResponseRequest:
      type: object
      description: Response serializer for social connect.
      properties:
        auth_url:
          type: string
          minLength: 1
        message:
          type: string
          minLength: 1
      required:
      - auth_url
      - message
    SocialDisconnectResponse:
      type: object
      description: Response serializer for social disconnect.
      properties:
        message:
          type: string
      required:
      - message
    SocialLoginRequestRequest:
      type: object
      description: Request serializer for social login.
      properties:
        provider:
          type: string
          minLength: 1
        code:
          type: string
          minLength: 1
        redirect_uri:
          type: string
          minLength: 1
      required:
      - code
      - provider
      - redirect_uri
    SocialLoginResponse:
      type: object
      description: Response serializer for social login.
      properties:
        access:
          type: string
        refresh:
          type: string
        user:
          type: object
          additionalProperties: {}
      required:
      - access
      - refresh
      - user
    SocialProvidersResponse:
      type: object
      description: Response serializer for social providers endpoint.
      properties:
        providers:
          type: array
          items:
            type: object
            additionalProperties: {}
        total:
          type: integer
        message:
          type: string
      required:
      - message
      - providers
      - total
    Status399Enum:
      enum:
      - draft
      - published
      - archived
      type: string
      description: |-
        * `draft` - Draft
        * `published` - Published
        * `archived` - Archived
    TestAttempt:
      type: object
      description: Serializer for test attempts.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        test:
          type: string
          format: uuid
        test_title:
          type: string
          readOnly: true
        student:
          type: string
          format: uuid
        student_name:
          type: string
          readOnly: true
        attempt_number:
          type: integer
          readOnly: true
          default: 1
        status:
          $ref: '#/components/schemas/TestAttemptStatusEnum'
        started_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        submitted_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        time_spent:
          type: integer
          readOnly: true
        expires_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        score:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
          readOnly: true
        percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          readOnly: true
        is_passed:
          type: boolean
          readOnly: true
        auto_graded:
          type: boolean
          readOnly: true
        manually_graded:
          type: boolean
          readOnly: true
        graded_by:
          type: string
          format: uuid
          readOnly: true
          nullable: true
        graded_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        instructor_feedback:
          type: string
          nullable: true
        responses:
          type: array
          items:
            $ref: '#/components/schemas/QuestionResponse'
          readOnly: true
        is_expired:
          type: boolean
          readOnly: true
        time_remaining:
          type: integer
          readOnly: true
      required:
      - attempt_number
      - auto_graded
      - expires_at
      - graded_at
      - graded_by
      - id
      - is_expired
      - is_passed
      - manually_graded
      - percentage
      - responses
      - score
      - started_at
      - student
      - student_name
      - submitted_at
      - test
      - test_title
      - time_remaining
      - time_spent
    TestAttemptRequest:
      type: object
      description: Serializer for test attempts.
      properties:
        test:
          type: string
          format: uuid
        student:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/TestAttemptStatusEnum'
        instructor_feedback:
          type: string
          nullable: true
      required:
      - student
      - test
    TestAttemptStatusEnum:
      enum:
      - not_started
      - in_progress
      - completed
      - submitted
      - graded
      - expired
      type: string
      description: |-
        * `not_started` - Not Started
        * `in_progress` - In Progress
        * `completed` - Completed
        * `submitted` - Submitted
        * `graded` - Graded
        * `expired` - Expired
    TestCreateUpdate:
      type: object
      description: Serializer for creating and updating tests.
      properties:
        title:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
        test_type:
          $ref: '#/components/schemas/TestTypeEnum'
        status:
          $ref: '#/components/schemas/Status399Enum'
        course:
          type: string
          format: uuid
        lesson:
          type: string
          format: uuid
          nullable: true
        time_limit:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Time limit in minutes (0 for no limit)
        available_from:
          type: string
          format: date-time
          nullable: true
        available_until:
          type: string
          format: date-time
          nullable: true
        max_attempts:
          type: integer
          maximum: 10
          minimum: 1
        allow_review:
          type: boolean
        show_correct_answers:
          type: boolean
        show_score_immediately:
          type: boolean
        grading_method:
          $ref: '#/components/schemas/GradingMethodEnum'
        passing_score:
          type: integer
          maximum: 100
          minimum: 0
        randomize_questions:
          type: boolean
        randomize_answers:
          type: boolean
        questions_per_page:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        require_password:
          type: boolean
        access_password:
          type: string
          nullable: true
          maxLength: 50
        ip_restrictions: {}
        require_webcam:
          type: boolean
        prevent_copy_paste:
          type: boolean
        full_screen_mode:
          type: boolean
      required:
      - course
      - title
    TestCreateUpdateRequest:
      type: object
      description: Serializer for creating and updating tests.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          nullable: true
        test_type:
          $ref: '#/components/schemas/TestTypeEnum'
        status:
          $ref: '#/components/schemas/Status399Enum'
        course:
          type: string
          format: uuid
        lesson:
          type: string
          format: uuid
          nullable: true
        time_limit:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Time limit in minutes (0 for no limit)
        available_from:
          type: string
          format: date-time
          nullable: true
        available_until:
          type: string
          format: date-time
          nullable: true
        max_attempts:
          type: integer
          maximum: 10
          minimum: 1
        allow_review:
          type: boolean
        show_correct_answers:
          type: boolean
        show_score_immediately:
          type: boolean
        grading_method:
          $ref: '#/components/schemas/GradingMethodEnum'
        passing_score:
          type: integer
          maximum: 100
          minimum: 0
        randomize_questions:
          type: boolean
        randomize_answers:
          type: boolean
        questions_per_page:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        require_password:
          type: boolean
        access_password:
          type: string
          nullable: true
          maxLength: 50
        ip_restrictions: {}
        require_webcam:
          type: boolean
        prevent_copy_paste:
          type: boolean
        full_screen_mode:
          type: boolean
      required:
      - course
      - title
    TestDetail:
      type: object
      description: Detailed serializer for tests with questions.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
        test_type:
          $ref: '#/components/schemas/TestTypeEnum'
        status:
          $ref: '#/components/schemas/Status399Enum'
        course:
          type: string
          format: uuid
        lesson:
          type: string
          format: uuid
          nullable: true
        instructor:
          type: string
          format: uuid
          readOnly: true
        course_title:
          type: string
          readOnly: true
        instructor_name:
          type: string
          readOnly: true
        time_limit:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Time limit in minutes (0 for no limit)
        available_from:
          type: string
          format: date-time
          nullable: true
        available_until:
          type: string
          format: date-time
          nullable: true
        max_attempts:
          type: integer
          maximum: 10
          minimum: 1
        allow_review:
          type: boolean
        show_correct_answers:
          type: boolean
        show_score_immediately:
          type: boolean
        grading_method:
          $ref: '#/components/schemas/GradingMethodEnum'
        passing_score:
          type: integer
          maximum: 100
          minimum: 0
        total_points:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        randomize_questions:
          type: boolean
        randomize_answers:
          type: boolean
        questions_per_page:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        require_password:
          type: boolean
        access_password:
          type: string
          nullable: true
          maxLength: 50
        ip_restrictions: {}
        require_webcam:
          type: boolean
        prevent_copy_paste:
          type: boolean
        full_screen_mode:
          type: boolean
        total_attempts:
          type: integer
          readOnly: true
        average_score:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          readOnly: true
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionList'
          readOnly: true
        is_available:
          type: boolean
          readOnly: true
        has_time_limit:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        published_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
      - average_score
      - course
      - course_title
      - created_at
      - has_time_limit
      - id
      - instructor
      - instructor_name
      - is_available
      - published_at
      - questions
      - title
      - total_attempts
      - updated_at
    TestDetailRequest:
      type: object
      description: Detailed serializer for tests with questions.
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          nullable: true
        test_type:
          $ref: '#/components/schemas/TestTypeEnum'
        status:
          $ref: '#/components/schemas/Status399Enum'
        course:
          type: string
          format: uuid
        lesson:
          type: string
          format: uuid
          nullable: true
        time_limit:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Time limit in minutes (0 for no limit)
        available_from:
          type: string
          format: date-time
          nullable: true
        available_until:
          type: string
          format: date-time
          nullable: true
        max_attempts:
          type: integer
          maximum: 10
          minimum: 1
        allow_review:
          type: boolean
        show_correct_answers:
          type: boolean
        show_score_immediately:
          type: boolean
        grading_method:
          $ref: '#/components/schemas/GradingMethodEnum'
        passing_score:
          type: integer
          maximum: 100
          minimum: 0
        total_points:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        randomize_questions:
          type: boolean
        randomize_answers:
          type: boolean
        questions_per_page:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        require_password:
          type: boolean
        access_password:
          type: string
          nullable: true
          maxLength: 50
        ip_restrictions: {}
        require_webcam:
          type: boolean
        prevent_copy_paste:
          type: boolean
        full_screen_mode:
          type: boolean
      required:
      - course
      - title
    TestList:
      type: object
      description: Serializer for test list view.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
          nullable: true
        test_type:
          $ref: '#/components/schemas/TestTypeEnum'
        status:
          $ref: '#/components/schemas/Status399Enum'
        course:
          type: string
          format: uuid
        course_title:
          type: string
          readOnly: true
        instructor_name:
          type: string
          readOnly: true
        time_limit:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          description: Time limit in minutes (0 for no limit)
        available_from:
          type: string
          format: date-time
          nullable: true
        available_until:
          type: string
          format: date-time
          nullable: true
        max_attempts:
          type: integer
          maximum: 10
          minimum: 1
        passing_score:
          type: integer
          maximum: 100
          minimum: 0
        total_points:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
        question_count:
          type: integer
          readOnly: true
        is_available:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - course
      - course_title
      - created_at
      - id
      - instructor_name
      - is_available
      - question_count
      - title
    TestResult:
      type: object
      description: Serializer for test results.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        test:
          type: string
          format: uuid
        test_title:
          type: string
          readOnly: true
        student:
          type: string
          format: uuid
        student_name:
          type: string
          readOnly: true
        best_attempt:
          type: string
          format: uuid
          readOnly: true
        best_score:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
          readOnly: true
        best_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
          readOnly: true
        total_attempts:
          type: integer
          readOnly: true
        average_score:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
          readOnly: true
        first_attempt_score:
          type: string
          format: decimal
          pattern: ^-?\d{0,6}(?:\.\d{0,2})?$
          readOnly: true
        is_passed:
          type: boolean
          readOnly: true
        is_completed:
          type: boolean
          readOnly: true
        total_time_spent:
          type: integer
          readOnly: true
        first_completed_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_attempt_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
      - average_score
      - best_attempt
      - best_percentage
      - best_score
      - first_attempt_score
      - first_completed_at
      - id
      - is_completed
      - is_passed
      - last_attempt_at
      - student
      - student_name
      - test
      - test_title
      - total_attempts
      - total_time_spent
    TestTypeEnum:
      enum:
      - quiz
      - exam
      - assignment
      - practice
      type: string
      description: |-
        * `quiz` - Quiz
        * `exam` - Exam
        * `assignment` - Assignment
        * `practice` - Practice Test
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
    User:
      type: object
      description: Serializer for User model with profile information.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        full_name:
          type: string
          readOnly: true
        role:
          $ref: '#/components/schemas/RoleEnum'
        school_id:
          type: string
          nullable: true
          pattern: ^[A-Z0-9]{4,20}$
          maxLength: 20
        grade_level:
          type: string
          nullable: true
          maxLength: 20
        department:
          type: string
          nullable: true
          maxLength: 100
        is_active:
          type: boolean
        is_email_verified:
          type: boolean
        date_joined:
          type: string
          format: date-time
          readOnly: true
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        profile:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
      required:
      - date_joined
      - email
      - first_name
      - full_name
      - id
      - last_login
      - last_name
      - profile
    UserDetail:
      type: object
      description: Detailed serializer for User model with additional information.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        full_name:
          type: string
          readOnly: true
        role:
          $ref: '#/components/schemas/RoleEnum'
        school_id:
          type: string
          nullable: true
          pattern: ^[A-Z0-9]{4,20}$
          maxLength: 20
        grade_level:
          type: string
          nullable: true
          maxLength: 20
        department:
          type: string
          nullable: true
          maxLength: 100
        is_active:
          type: boolean
        is_email_verified:
          type: boolean
        date_joined:
          type: string
          format: date-time
          readOnly: true
        last_login:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        profile:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/UserSession'
          readOnly: true
        total_courses:
          type: integer
          readOnly: true
        completed_courses:
          type: integer
          readOnly: true
      required:
      - completed_courses
      - date_joined
      - email
      - first_name
      - full_name
      - id
      - last_login
      - last_name
      - profile
      - sessions
      - total_courses
    UserDetailRequest:
      type: object
      description: Detailed serializer for User model with additional information.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        first_name:
          type: string
          minLength: 1
          maxLength: 30
        last_name:
          type: string
          minLength: 1
          maxLength: 30
        role:
          $ref: '#/components/schemas/RoleEnum'
        school_id:
          type: string
          nullable: true
          pattern: ^[A-Z0-9]{4,20}$
          maxLength: 20
        grade_level:
          type: string
          nullable: true
          maxLength: 20
        department:
          type: string
          nullable: true
          maxLength: 100
        is_active:
          type: boolean
        is_email_verified:
          type: boolean
      required:
      - email
      - first_name
      - last_name
    UserProfile:
      type: object
      description: Serializer for UserProfile model.
      properties:
        user:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
        student_id:
          type: string
          nullable: true
          maxLength: 20
        enrollment_date:
          type: string
          format: date
          nullable: true
        graduation_date:
          type: string
          format: date
          nullable: true
        employee_id:
          type: string
          nullable: true
          maxLength: 20
        hire_date:
          type: string
          format: date
          nullable: true
        subjects: {}
        qualifications:
          type: string
          nullable: true
        current_year:
          type: string
          nullable: true
          maxLength: 20
        gpa:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,2})?$
          nullable: true
        emergency_contact_name:
          type: string
          nullable: true
          maxLength: 100
        emergency_contact_phone:
          type: string
          nullable: true
          maxLength: 20
        emergency_contact_relationship:
          type: string
          nullable: true
          maxLength: 50
        preferred_learning_style:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/PreferredLearningStyleEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        linkedin_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        twitter_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - updated_at
      - user
    UserProfileRequest:
      type: object
      description: Serializer for UserProfile model.
      properties:
        user:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
        student_id:
          type: string
          nullable: true
          maxLength: 20
        enrollment_date:
          type: string
          format: date
          nullable: true
        graduation_date:
          type: string
          format: date
          nullable: true
        employee_id:
          type: string
          nullable: true
          maxLength: 20
        hire_date:
          type: string
          format: date
          nullable: true
        subjects: {}
        qualifications:
          type: string
          nullable: true
        current_year:
          type: string
          nullable: true
          maxLength: 20
        gpa:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,2})?$
          nullable: true
        emergency_contact_name:
          type: string
          nullable: true
          maxLength: 100
        emergency_contact_phone:
          type: string
          nullable: true
          maxLength: 20
        emergency_contact_relationship:
          type: string
          nullable: true
          maxLength: 50
        preferred_learning_style:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/PreferredLearningStyleEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        linkedin_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        twitter_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
      required:
      - user
    UserSession:
      type: object
      description: Serializer for UserSession model.
      properties:
        user:
          type: string
          format: uuid
        user_email:
          type: string
          readOnly: true
        session_key:
          type: string
          maxLength: 40
        ip_address:
          type: string
        user_agent:
          type: string
        browser:
          type: string
          nullable: true
          maxLength: 100
        operating_system:
          type: string
          nullable: true
          maxLength: 100
        device_type:
          type: string
          nullable: true
          maxLength: 50
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        last_activity:
          type: string
          format: date-time
          readOnly: true
        expires_at:
          type: string
          format: date-time
      required:
      - created_at
      - expires_at
      - ip_address
      - last_activity
      - session_key
      - user
      - user_agent
      - user_email
    UserSessionRequest:
      type: object
      description: Serializer for UserSession model.
      properties:
        user:
          type: string
          format: uuid
        session_key:
          type: string
          minLength: 1
          maxLength: 40
        ip_address:
          type: string
          minLength: 1
        user_agent:
          type: string
          minLength: 1
        browser:
          type: string
          nullable: true
          maxLength: 100
        operating_system:
          type: string
          nullable: true
          maxLength: 100
        device_type:
          type: string
          nullable: true
          maxLength: 50
        is_active:
          type: boolean
        expires_at:
          type: string
          format: date-time
      required:
      - expires_at
      - ip_address
      - session_key
      - user
      - user_agent
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
- name: Authentication
  description: User authentication and authorization
- name: Users
  description: User management
- name: Courses
  description: Course management
- name: Tests
  description: Test and quiz management
- name: Badges
  description: Badge and achievement system
- name: Notifications
  description: Notification management
- name: Payments
  description: Payment processing
- name: Certifications
  description: Certificate management
- name: Analytics
  description: Analytics and reporting
