# Generated by Django 5.2.1 on 2025-05-24 01:53

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BankQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('essay', 'Essay'), ('fill_blank', 'Fill in the Blank'), ('matching', 'Matching'), ('ordering', 'Ordering')], default='multiple_choice', max_length=20)),
                ('points', models.DecimalField(decimal_places=2, default=1.0, max_digits=6)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20)),
                ('image', models.ImageField(blank=True, null=True, upload_to='tests/bank_questions/%Y/%m/')),
                ('explanation', models.TextField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Bank Question',
                'verbose_name_plural': 'Bank Questions',
                'db_table': 'tests_bank_question',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('essay', 'Essay'), ('fill_blank', 'Fill in the Blank'), ('matching', 'Matching'), ('ordering', 'Ordering')], default='multiple_choice', max_length=20)),
                ('order', models.PositiveIntegerField(default=0)),
                ('points', models.DecimalField(decimal_places=2, default=1.0, max_digits=6)),
                ('is_required', models.BooleanField(default=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='tests/questions/%Y/%m/')),
                ('explanation', models.TextField(blank=True, null=True)),
                ('case_sensitive', models.BooleanField(default=False)),
                ('partial_credit', models.BooleanField(default=False)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'db_table': 'tests_question',
                'ordering': ['test', 'order'],
            },
        ),
        migrations.CreateModel(
            name='BankAnswer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('answer_text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('points', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='tests.bankquestion')),
            ],
            options={
                'verbose_name': 'Bank Answer',
                'verbose_name_plural': 'Bank Answers',
                'db_table': 'tests_bank_answer',
                'ordering': ['question', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('answer_text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('points', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('match_text', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='tests.question')),
            ],
            options={
                'verbose_name': 'Answer',
                'verbose_name_plural': 'Answers',
                'db_table': 'tests_answer',
                'ordering': ['question', 'order'],
            },
        ),
        migrations.CreateModel(
            name='QuestionBank',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=False)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_banks', to='courses.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_banks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Question Bank',
                'verbose_name_plural': 'Question Banks',
                'db_table': 'tests_question_bank',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='bankquestion',
            name='bank',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='tests.questionbank'),
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('test_type', models.CharField(choices=[('quiz', 'Quiz'), ('exam', 'Exam'), ('assignment', 'Assignment'), ('practice', 'Practice Test')], default='quiz', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('time_limit', models.PositiveIntegerField(default=0, help_text='Time limit in minutes (0 for no limit)')),
                ('available_from', models.DateTimeField(blank=True, null=True)),
                ('available_until', models.DateTimeField(blank=True, null=True)),
                ('max_attempts', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('allow_review', models.BooleanField(default=True)),
                ('show_correct_answers', models.BooleanField(default=True)),
                ('show_score_immediately', models.BooleanField(default=True)),
                ('grading_method', models.CharField(choices=[('auto', 'Auto Grade'), ('manual', 'Manual Grade'), ('mixed', 'Mixed Grading')], default='auto', max_length=20)),
                ('passing_score', models.PositiveIntegerField(default=70, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_points', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('randomize_questions', models.BooleanField(default=False)),
                ('randomize_answers', models.BooleanField(default=False)),
                ('questions_per_page', models.PositiveIntegerField(default=1)),
                ('require_password', models.BooleanField(default=False)),
                ('access_password', models.CharField(blank=True, max_length=50, null=True)),
                ('ip_restrictions', models.JSONField(blank=True, default=list)),
                ('require_webcam', models.BooleanField(default=False)),
                ('prevent_copy_paste', models.BooleanField(default=False)),
                ('full_screen_mode', models.BooleanField(default=False)),
                ('total_attempts', models.PositiveIntegerField(default=0)),
                ('average_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='courses.course')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tests', to=settings.AUTH_USER_MODEL)),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='courses.lesson')),
            ],
            options={
                'verbose_name': 'Test',
                'verbose_name_plural': 'Tests',
                'db_table': 'tests_test',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='tests.test'),
        ),
        migrations.CreateModel(
            name='TestAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('submitted', 'Submitted'), ('graded', 'Graded'), ('expired', 'Expired')], default='not_started', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('time_spent', models.PositiveIntegerField(default=0)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('score', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('is_passed', models.BooleanField(default=False)),
                ('auto_graded', models.BooleanField(default=False)),
                ('manually_graded', models.BooleanField(default=False)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('browser_events', models.JSONField(blank=True, default=list)),
                ('instructor_feedback', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('graded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_attempts', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_attempts', to=settings.AUTH_USER_MODEL)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='tests.test')),
            ],
            options={
                'verbose_name': 'Test Attempt',
                'verbose_name_plural': 'Test Attempts',
                'db_table': 'tests_test_attempt',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuestionResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text_response', models.TextField(blank=True, null=True)),
                ('file_response', models.FileField(blank=True, null=True, upload_to='tests/responses/%Y/%m/')),
                ('response_data', models.JSONField(blank=True, default=dict)),
                ('points_earned', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('is_correct', models.BooleanField(default=False)),
                ('is_graded', models.BooleanField(default=False)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('time_spent', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='tests.question')),
                ('selected_answers', models.ManyToManyField(blank=True, related_name='selected_in_responses', to='tests.answer')),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='tests.testattempt')),
            ],
            options={
                'verbose_name': 'Question Response',
                'verbose_name_plural': 'Question Responses',
                'db_table': 'tests_question_response',
            },
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('best_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('best_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('total_attempts', models.PositiveIntegerField(default=0)),
                ('average_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('first_attempt_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('is_passed', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('total_time_spent', models.PositiveIntegerField(default=0)),
                ('first_completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('best_attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='best_results', to='tests.testattempt')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_results', to=settings.AUTH_USER_MODEL)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='tests.test')),
            ],
            options={
                'verbose_name': 'Test Result',
                'verbose_name_plural': 'Test Results',
                'db_table': 'tests_test_result',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.AddIndex(
            model_name='answer',
            index=models.Index(fields=['question', 'order'], name='tests_answe_questio_a01152_idx'),
        ),
        migrations.AddIndex(
            model_name='test',
            index=models.Index(fields=['course', 'status'], name='tests_test_course__f32629_idx'),
        ),
        migrations.AddIndex(
            model_name='test',
            index=models.Index(fields=['instructor'], name='tests_test_instruc_895d93_idx'),
        ),
        migrations.AddIndex(
            model_name='test',
            index=models.Index(fields=['available_from', 'available_until'], name='tests_test_availab_a4d9dd_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['test', 'order'], name='tests_quest_test_id_983ded_idx'),
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['test', 'student'], name='tests_test__test_id_437a27_idx'),
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['status'], name='tests_test__status_1734a1_idx'),
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['started_at'], name='tests_test__started_435978_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='testattempt',
            unique_together={('test', 'student', 'attempt_number')},
        ),
        migrations.AddIndex(
            model_name='questionresponse',
            index=models.Index(fields=['attempt', 'question'], name='tests_quest_attempt_4fbbc1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='questionresponse',
            unique_together={('attempt', 'question')},
        ),
        migrations.AddIndex(
            model_name='testresult',
            index=models.Index(fields=['test', 'is_passed'], name='tests_test__test_id_9fae70_idx'),
        ),
        migrations.AddIndex(
            model_name='testresult',
            index=models.Index(fields=['student'], name='tests_test__student_4b18e7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='testresult',
            unique_together={('test', 'student')},
        ),
    ]
